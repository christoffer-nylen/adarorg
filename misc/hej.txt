+-A_DECLARATION:             procedure Expr_4 is (A_PROCEDURE_BODY_DECLARATION)
|                               type week is('d', 'e', 'f');
|                               a : week := 'd';
|                               b : week := 'e';
|                               c : week := week'Val(0);
|                            
|                               type Signal_Type       is
|                                 (Ac,           Dc,           Prep_1,       Prep_2,       Prep_3,
|                                  Arm,          Fire,         Jettison_Cmd);
|                            
|                               Signal : Signal_Type := Ac;
|                            
|                               type Signal_Error_Type is (Signal_Ok,
|                                                         Short_Circuit,
|                                                          Open_Circuit);
|                            
|                               type Signal_Name_Type is         -- Generated in IRS parser, file "code.ads"
|                                 (AIU_LG_Retracted,
|                                  AIU_Power_Supply_Mode_1,
|                                  AIU_Power_Supply_Mode_2,
|                                  BOY_Rear_Fuselage_Ident_1,
|                                  Boot_Load,
|                                  FM_Prep_Supply,
|                                  FM_Prep_2_P1L,
|                                  FM_Prep_2_P1R,
|                                  FM_Prep_2_P2L,
|                                  FM_Prep_2_P2R,
|                                  FM_Prep_2_P3L,
|                                  FM_Prep_2_P3R,
|                                  FM_Prep_2_P4,
|                                  FM_Prep_2_P5,
|                                  FM_Prep_3_P1L,
|                                  FM_Prep_3_P1R,
|                                  FM_Prep_3_P2L,
|                                  FM_Prep_3_P2R,
|                                  FM_Prep_3_P3L);
|                            
|                               type Tristate_Name_Type is       -- Manually written, not generated in IRS parser
|                                 ( SMU_PREP_4_P2L,
|                                   SMU_PREP_4_P2R,
|                                   SMU_PREP_4_P3L,
|                                   SMU_PREP_4_P3R,
|                                   SMU_PREP_4_P4,
|                                   SMU_PREP_5_P2L,
|                                   SMU_PREP_5_P2R,
|                                   SMU_PREP_5_P3L,
|                                   SMU_PREP_5_P3R,
|                                   SMU_PREP_5_P4,
|                                   SMU_PREP_6_P2L,
|                                   SMU_PREP_6_P2R,
|                                   SMU_PREP_6_P3L,
|                                   SMU_PREP_6_P3R,
|                                   SMU_PREP_6_P4,
|                                   SW_Logic_1_P2L,
|                                   SW_Logic_1_P2R,
|                                   SW_Logic_1_P3L,
|                                   SW_Logic_1_P3R,
|                                   SW_Logic_2_P2L,
|                                   SW_Logic_2_P2R,
|                                   SW_Logic_2_P3L,
|                                   SW_Logic_2_P3R,
|                                   SW_Logic_3_P2L,
|                                   SW_Logic_3_P2R,
|                                   SW_Logic_3_P3L,
|                                   SW_Logic_3_P3R,
|                                   SW_Logic_4_P2L,
|                                   SW_Logic_4_P2R,
|                                   SW_Logic_4_P3L,
|                                   SW_Logic_4_P3R,
|                                   Not_Used);
|                            
|                               type In_Signal_Error_Set_Type is array(Signal_Name_Type) of Signal_Error_Type;
|                               type Tristate_Signal_Error_Set_Type is array(Signal_Error_Type) of Boolean ;
|                               type Tristate_Error_Set_Type is array(Tristate_Name_Type) of Tristate_Signal_Error_Set_Type;
|                            
|                               Tristate_Error           : Tristate_Error_Set_Type;
|                               In_Signal_Error          : In_Signal_Error_Set_Type;
|                               Signal_Name : Tristate_Name_Type;
|                            
|                               Hej : constant Signal_Name_Type := FM_Prep_2_P1R;
|                            
|                            begin
|                               for I in Signal_Name_Type'Range loop
|                                  if (A='d' or B='e' or C = 'f') then
|                                     null;
|                                  elsif (Signal = Prep_1 or Signal = Prep_2 or Signal = Prep_3) and
|                                    (In_Signal_Error(Fm_Prep_Supply) = Short_Circuit or
|                                     In_Signal_Error(Fm_Prep_Supply) = Open_Circuit) then
|                                     null;
|                                  elsif (Tristate_Error(Signal_Name)(Short_Circuit) or
|                                         Tristate_Error(Signal_Name)(Open_Circuit) or
|                                         Signal_Name = Not_Used) then
|                                     null;
|                                  elsif In_Signal_Error(I)=Short_Circuit then
|                                     null;
|                                  end if;
|                               end loop;
|                            
|                               for R in Signal_Name_Type'Range loop
|                                  null;
|                               end loop;
|                            end Expr_4;
| +-A_DEFINING_NAME:         Expr_4 (A_DEFINING_IDENTIFIER)
| +-A_DECLARATION:           type week is('d', 'e', 'f'); (AN_ORDINARY_TYPE_DECLARATION)
| | +-A_DEFINING_NAME:       week (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          ('d', 'e', 'f') (A_TYPE_DEFINITION)
| | | +-A_DECLARATION:       'd' (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   'd' (A_DEFINING_CHARACTER_LITERAL)
| | | +-A_DECLARATION:       'e' (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   'e' (A_DEFINING_CHARACTER_LITERAL)
| | | +-A_DECLARATION:       'f' (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   'f' (A_DEFINING_CHARACTER_LITERAL)
| +-A_DECLARATION:           a : week := 'd'; (A_VARIABLE_DECLARATION)
| | +-A_DEFINING_NAME:       a (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          week (A_SUBTYPE_INDICATION)
| | | +-AN_EXPRESSION:       week (AN_IDENTIFIER)
| | +-AN_EXPRESSION:         'd' (A_CHARACTER_LITERAL)
| +-A_DECLARATION:           b : week := 'e'; (A_VARIABLE_DECLARATION)
| | +-A_DEFINING_NAME:       b (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          week (A_SUBTYPE_INDICATION)
| | | +-AN_EXPRESSION:       week (AN_IDENTIFIER)
| | +-AN_EXPRESSION:         'e' (A_CHARACTER_LITERAL)
| +-A_DECLARATION:           c : week := week'Val(0); (A_VARIABLE_DECLARATION)
| | +-A_DEFINING_NAME:       c (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          week (A_SUBTYPE_INDICATION)
| | | +-AN_EXPRESSION:       week (AN_IDENTIFIER)
| | +-AN_EXPRESSION:         week'Val(0) (A_FUNCTION_CALL)
| | | +-AN_EXPRESSION:       week'Val (AN_ATTRIBUTE_REFERENCE)
| | | | +-AN_EXPRESSION:     week (AN_IDENTIFIER)
| | | | +-AN_EXPRESSION:     Val (AN_IDENTIFIER)
| | | +-AN_ASSOCIATION:      0 (A_PARAMETER_ASSOCIATION)
| | | | +-AN_EXPRESSION:     0 (AN_INTEGER_LITERAL)
| +-A_DECLARATION:           type Signal_Type       is (AN_ORDINARY_TYPE_DECLARATION)
| |                               (Ac,           Dc,           Prep_1,       Prep_2,       Prep_3,
| |                                Arm,          Fire,         Jettison_Cmd);
| | +-A_DEFINING_NAME:       Signal_Type (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          (Ac,           Dc,           Prep_1,       Prep_2,       Prep_3, (A_TYPE_DEFINITION)
| | |                              Arm,          Fire,         Jettison_Cmd)
| | | +-A_DECLARATION:       Ac (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Ac (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       Dc (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Dc (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       Prep_1 (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Prep_1 (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       Prep_2 (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Prep_2 (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       Prep_3 (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Prep_3 (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       Arm (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Arm (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       Fire (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Fire (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       Jettison_Cmd (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Jettison_Cmd (A_DEFINING_ENUMERATION_LITERAL)
| +-A_DECLARATION:           Signal : Signal_Type := Ac; (A_VARIABLE_DECLARATION)
| | +-A_DEFINING_NAME:       Signal (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          Signal_Type (A_SUBTYPE_INDICATION)
| | | +-AN_EXPRESSION:       Signal_Type (AN_IDENTIFIER)
| | +-AN_EXPRESSION:         Ac (AN_ENUMERATION_LITERAL)
| +-A_DECLARATION:           type Signal_Error_Type is (Signal_Ok, (AN_ORDINARY_TYPE_DECLARATION)
| |                                                       Short_Circuit,
| |                                                        Open_Circuit);
| | +-A_DEFINING_NAME:       Signal_Error_Type (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          (Signal_Ok, (A_TYPE_DEFINITION)
| | |                                                     Short_Circuit,
| | |                                                      Open_Circuit)
| | | +-A_DECLARATION:       Signal_Ok (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Signal_Ok (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       Short_Circuit (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Short_Circuit (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       Open_Circuit (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Open_Circuit (A_DEFINING_ENUMERATION_LITERAL)
| +-A_DECLARATION:           type Signal_Name_Type is         -- Generated in IRS parser, file "code.ads" (AN_ORDINARY_TYPE_DECLARATION)
| |                               (AIU_LG_Retracted,
| |                                AIU_Power_Supply_Mode_1,
| |                                AIU_Power_Supply_Mode_2,
| |                                BOY_Rear_Fuselage_Ident_1,
| |                                Boot_Load,
| |                                FM_Prep_Supply,
| |                                FM_Prep_2_P1L,
| |                                FM_Prep_2_P1R,
| |                                FM_Prep_2_P2L,
| |                                FM_Prep_2_P2R,
| |                                FM_Prep_2_P3L,
| |                                FM_Prep_2_P3R,
| |                                FM_Prep_2_P4,
| |                                FM_Prep_2_P5,
| |                                FM_Prep_3_P1L,
| |                                FM_Prep_3_P1R,
| |                                FM_Prep_3_P2L,
| |                                FM_Prep_3_P2R,
| |                                FM_Prep_3_P3L);
| | +-A_DEFINING_NAME:       Signal_Name_Type (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          (AIU_LG_Retracted, (A_TYPE_DEFINITION)
| | |                              AIU_Power_Supply_Mode_1,
| | |                              AIU_Power_Supply_Mode_2,
| | |                              BOY_Rear_Fuselage_Ident_1,
| | |                              Boot_Load,
| | |                              FM_Prep_Supply,
| | |                              FM_Prep_2_P1L,
| | |                              FM_Prep_2_P1R,
| | |                              FM_Prep_2_P2L,
| | |                              FM_Prep_2_P2R,
| | |                              FM_Prep_2_P3L,
| | |                              FM_Prep_2_P3R,
| | |                              FM_Prep_2_P4,
| | |                              FM_Prep_2_P5,
| | |                              FM_Prep_3_P1L,
| | |                              FM_Prep_3_P1R,
| | |                              FM_Prep_3_P2L,
| | |                              FM_Prep_3_P2R,
| | |                              FM_Prep_3_P3L)
| | | +-A_DECLARATION:       AIU_LG_Retracted (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   AIU_LG_Retracted (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       AIU_Power_Supply_Mode_1 (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   AIU_Power_Supply_Mode_1 (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       AIU_Power_Supply_Mode_2 (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   AIU_Power_Supply_Mode_2 (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       BOY_Rear_Fuselage_Ident_1 (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   BOY_Rear_Fuselage_Ident_1 (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       Boot_Load (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Boot_Load (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_Supply (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_Supply (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_2_P1L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_2_P1L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_2_P1R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_2_P1R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_2_P2L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_2_P2L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_2_P2R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_2_P2R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_2_P3L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_2_P3L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_2_P3R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_2_P3R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_2_P4 (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_2_P4 (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_2_P5 (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_2_P5 (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_3_P1L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_3_P1L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_3_P1R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_3_P1R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_3_P2L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_3_P2L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_3_P2R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_3_P2R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       FM_Prep_3_P3L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   FM_Prep_3_P3L (A_DEFINING_ENUMERATION_LITERAL)
| +-A_DECLARATION:           type Tristate_Name_Type is       -- Manually written, not generated in IRS parser (AN_ORDINARY_TYPE_DECLARATION)
| |                               ( SMU_PREP_4_P2L,
| |                                 SMU_PREP_4_P2R,
| |                                 SMU_PREP_4_P3L,
| |                                 SMU_PREP_4_P3R,
| |                                 SMU_PREP_4_P4,
| |                                 SMU_PREP_5_P2L,
| |                                 SMU_PREP_5_P2R,
| |                                 SMU_PREP_5_P3L,
| |                                 SMU_PREP_5_P3R,
| |                                 SMU_PREP_5_P4,
| |                                 SMU_PREP_6_P2L,
| |                                 SMU_PREP_6_P2R,
| |                                 SMU_PREP_6_P3L,
| |                                 SMU_PREP_6_P3R,
| |                                 SMU_PREP_6_P4,
| |                                 SW_Logic_1_P2L,
| |                                 SW_Logic_1_P2R,
| |                                 SW_Logic_1_P3L,
| |                                 SW_Logic_1_P3R,
| |                                 SW_Logic_2_P2L,
| |                                 SW_Logic_2_P2R,
| |                                 SW_Logic_2_P3L,
| |                                 SW_Logic_2_P3R,
| |                                 SW_Logic_3_P2L,
| |                                 SW_Logic_3_P2R,
| |                                 SW_Logic_3_P3L,
| |                                 SW_Logic_3_P3R,
| |                                 SW_Logic_4_P2L,
| |                                 SW_Logic_4_P2R,
| |                                 SW_Logic_4_P3L,
| |                                 SW_Logic_4_P3R,
| |                                 Not_Used);
| | +-A_DEFINING_NAME:       Tristate_Name_Type (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          ( SMU_PREP_4_P2L, (A_TYPE_DEFINITION)
| | |                               SMU_PREP_4_P2R,
| | |                               SMU_PREP_4_P3L,
| | |                               SMU_PREP_4_P3R,
| | |                               SMU_PREP_4_P4,
| | |                               SMU_PREP_5_P2L,
| | |                               SMU_PREP_5_P2R,
| | |                               SMU_PREP_5_P3L,
| | |                               SMU_PREP_5_P3R,
| | |                               SMU_PREP_5_P4,
| | |                               SMU_PREP_6_P2L,
| | |                               SMU_PREP_6_P2R,
| | |                               SMU_PREP_6_P3L,
| | |                               SMU_PREP_6_P3R,
| | |                               SMU_PREP_6_P4,
| | |                               SW_Logic_1_P2L,
| | |                               SW_Logic_1_P2R,
| | |                               SW_Logic_1_P3L,
| | |                               SW_Logic_1_P3R,
| | |                               SW_Logic_2_P2L,
| | |                               SW_Logic_2_P2R,
| | |                               SW_Logic_2_P3L,
| | |                               SW_Logic_2_P3R,
| | |                               SW_Logic_3_P2L,
| | |                               SW_Logic_3_P2R,
| | |                               SW_Logic_3_P3L,
| | |                               SW_Logic_3_P3R,
| | |                               SW_Logic_4_P2L,
| | |                               SW_Logic_4_P2R,
| | |                               SW_Logic_4_P3L,
| | |                               SW_Logic_4_P3R,
| | |                               Not_Used)
| | | +-A_DECLARATION:       SMU_PREP_4_P2L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_4_P2L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_4_P2R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_4_P2R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_4_P3L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_4_P3L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_4_P3R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_4_P3R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_4_P4 (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_4_P4 (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_5_P2L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_5_P2L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_5_P2R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_5_P2R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_5_P3L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_5_P3L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_5_P3R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_5_P3R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_5_P4 (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_5_P4 (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_6_P2L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_6_P2L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_6_P2R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_6_P2R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_6_P3L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_6_P3L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_6_P3R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_6_P3R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SMU_PREP_6_P4 (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SMU_PREP_6_P4 (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_1_P2L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_1_P2L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_1_P2R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_1_P2R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_1_P3L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_1_P3L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_1_P3R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_1_P3R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_2_P2L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_2_P2L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_2_P2R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_2_P2R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_2_P3L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_2_P3L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_2_P3R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_2_P3R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_3_P2L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_3_P2L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_3_P2R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_3_P2R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_3_P3L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_3_P3L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_3_P3R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_3_P3R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_4_P2L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_4_P2L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_4_P2R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_4_P2R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_4_P3L (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_4_P3L (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       SW_Logic_4_P3R (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   SW_Logic_4_P3R (A_DEFINING_ENUMERATION_LITERAL)
| | | +-A_DECLARATION:       Not_Used (AN_ENUMERATION_LITERAL_SPECIFICATION)
| | | | +-A_DEFINING_NAME:   Not_Used (A_DEFINING_ENUMERATION_LITERAL)
| +-A_DECLARATION:           type In_Signal_Error_Set_Type is array(Signal_Name_Type) of Signal_Error_Type; (AN_ORDINARY_TYPE_DECLARATION)
| | +-A_DEFINING_NAME:       In_Signal_Error_Set_Type (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          array(Signal_Name_Type) of Signal_Error_Type (A_TYPE_DEFINITION)
| | | +-A_DEFINITION:        Signal_Name_Type (A_DISCRETE_SUBTYPE_DEFINITION)
| | | | +-AN_EXPRESSION:     Signal_Name_Type (AN_IDENTIFIER)
| | | +-A_DEFINITION:        Signal_Error_Type (A_COMPONENT_DEFINITION)
| | | | +-A_DEFINITION:      Signal_Error_Type (A_SUBTYPE_INDICATION)
| | | | | +-AN_EXPRESSION:   Signal_Error_Type (AN_IDENTIFIER)
| +-A_DECLARATION:           type Tristate_Signal_Error_Set_Type is array(Signal_Error_Type) of Boolean ; (AN_ORDINARY_TYPE_DECLARATION)
| | +-A_DEFINING_NAME:       Tristate_Signal_Error_Set_Type (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          array(Signal_Error_Type) of Boolean (A_TYPE_DEFINITION)
| | | +-A_DEFINITION:        Signal_Error_Type (A_DISCRETE_SUBTYPE_DEFINITION)
| | | | +-AN_EXPRESSION:     Signal_Error_Type (AN_IDENTIFIER)
| | | +-A_DEFINITION:        Boolean (A_COMPONENT_DEFINITION)
| | | | +-A_DEFINITION:      Boolean (A_SUBTYPE_INDICATION)
| | | | | +-AN_EXPRESSION:   Boolean (AN_IDENTIFIER)
| +-A_DECLARATION:           type Tristate_Error_Set_Type is array(Tristate_Name_Type) of Tristate_Signal_Error_Set_Type; (AN_ORDINARY_TYPE_DECLARATION)
| | +-A_DEFINING_NAME:       Tristate_Error_Set_Type (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          array(Tristate_Name_Type) of Tristate_Signal_Error_Set_Type (A_TYPE_DEFINITION)
| | | +-A_DEFINITION:        Tristate_Name_Type (A_DISCRETE_SUBTYPE_DEFINITION)
| | | | +-AN_EXPRESSION:     Tristate_Name_Type (AN_IDENTIFIER)
| | | +-A_DEFINITION:        Tristate_Signal_Error_Set_Type (A_COMPONENT_DEFINITION)
| | | | +-A_DEFINITION:      Tristate_Signal_Error_Set_Type (A_SUBTYPE_INDICATION)
| | | | | +-AN_EXPRESSION:   Tristate_Signal_Error_Set_Type (AN_IDENTIFIER)
| +-A_DECLARATION:           Tristate_Error           : Tristate_Error_Set_Type; (A_VARIABLE_DECLARATION)
| | +-A_DEFINING_NAME:       Tristate_Error (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          Tristate_Error_Set_Type (A_SUBTYPE_INDICATION)
| | | +-AN_EXPRESSION:       Tristate_Error_Set_Type (AN_IDENTIFIER)
| +-A_DECLARATION:           In_Signal_Error          : In_Signal_Error_Set_Type; (A_VARIABLE_DECLARATION)
| | +-A_DEFINING_NAME:       In_Signal_Error (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          In_Signal_Error_Set_Type (A_SUBTYPE_INDICATION)
| | | +-AN_EXPRESSION:       In_Signal_Error_Set_Type (AN_IDENTIFIER)
| +-A_DECLARATION:           Signal_Name : Tristate_Name_Type; (A_VARIABLE_DECLARATION)
| | +-A_DEFINING_NAME:       Signal_Name (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          Tristate_Name_Type (A_SUBTYPE_INDICATION)
| | | +-AN_EXPRESSION:       Tristate_Name_Type (AN_IDENTIFIER)
| +-A_DECLARATION:           Hej : constant Signal_Name_Type := FM_Prep_2_P1R; (A_CONSTANT_DECLARATION)
| | +-A_DEFINING_NAME:       Hej (A_DEFINING_IDENTIFIER)
| | +-A_DEFINITION:          Signal_Name_Type (A_SUBTYPE_INDICATION)
| | | +-AN_EXPRESSION:       Signal_Name_Type (AN_IDENTIFIER)
| | +-AN_EXPRESSION:         FM_Prep_2_P1R (AN_ENUMERATION_LITERAL)
| +-A_STATEMENT:             for I in Signal_Name_Type'Range loop (A_FOR_LOOP_STATEMENT)
| |                                if (A='d' or B='e' or C = 'f') then
| |                                   null;
| |                                elsif (Signal = Prep_1 or Signal = Prep_2 or Signal = Prep_3) and
| |                                  (In_Signal_Error(Fm_Prep_Supply) = Short_Circuit or
| |                                   In_Signal_Error(Fm_Prep_Supply) = Open_Circuit) then
| |                                   null;
| |                                elsif (Tristate_Error(Signal_Name)(Short_Circuit) or
| |                                       Tristate_Error(Signal_Name)(Open_Circuit) or
| |                                       Signal_Name = Not_Used) then
| |                                   null;
| |                                elsif In_Signal_Error(I)=Short_Circuit then
| |                                   null;
| |                                end if;
| |                             end loop;
| | +-A_DECLARATION:         I in Signal_Name_Type'Range (A_LOOP_PARAMETER_SPECIFICATION)
| | | +-A_DEFINING_NAME:     I (A_DEFINING_IDENTIFIER)
| | | +-A_DEFINITION:        Signal_Name_Type'Range (A_DISCRETE_SUBTYPE_DEFINITION)
| | | | +-AN_EXPRESSION:     Signal_Name_Type'Range (AN_ATTRIBUTE_REFERENCE)
| | | | | +-AN_EXPRESSION:   Signal_Name_Type (AN_IDENTIFIER)
| | | | | +-AN_EXPRESSION:   Range (AN_IDENTIFIER)
| | +-A_STATEMENT:           if (A='d' or B='e' or C = 'f') then (AN_IF_STATEMENT)
| | |                                 null;
| | |                              elsif (Signal = Prep_1 or Signal = Prep_2 or Signal = Prep_3) and
| | |                                (In_Signal_Error(Fm_Prep_Supply) = Short_Circuit or
| | |                                 In_Signal_Error(Fm_Prep_Supply) = Open_Circuit) then
| | |                                 null;
| | |                              elsif (Tristate_Error(Signal_Name)(Short_Circuit) or
| | |                                     Tristate_Error(Signal_Name)(Open_Circuit) or
| | |                                     Signal_Name = Not_Used) then
| | |                                 null;
| | |                              elsif In_Signal_Error(I)=Short_Circuit then
| | |                                 null;
| | |                              end if;
| | | +-A_PATH:              if (A='d' or B='e' or C = 'f') then (AN_IF_PATH)
| | | |                               null;
| | | | +-AN_EXPRESSION:     (A='d' or B='e' or C = 'f') (A_PARENTHESIZED_EXPRESSION)
| | | | | +-AN_EXPRESSION:   A='d' or B='e' or C = 'f' (A_FUNCTION_CALL)
| | | | | | +-AN_ASSOCIATION:          A='d' or B='e' (A_PARAMETER_ASSOCIATION)
| | | | | | | +-AN_EXPRESSION:         A='d' or B='e' (A_FUNCTION_CALL)
| | | | | | | | +-AN_ASSOCIATION:      A='d' (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     A='d' (A_FUNCTION_CALL)
| | | | | | | | | | +-AN_ASSOCIATION:  A (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           A (AN_IDENTIFIER)
| | | | | | | | | | +-AN_EXPRESSION:   = (AN_OPERATOR_SYMBOL)
| | | | | | | | | | +-AN_ASSOCIATION:  'd' (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           'd' (A_CHARACTER_LITERAL)
| | | | | | | | +-AN_EXPRESSION:       or (AN_OPERATOR_SYMBOL)
| | | | | | | | +-AN_ASSOCIATION:      B='e' (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     B='e' (A_FUNCTION_CALL)
| | | | | | | | | | +-AN_ASSOCIATION:  B (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           B (AN_IDENTIFIER)
| | | | | | | | | | +-AN_EXPRESSION:   = (AN_OPERATOR_SYMBOL)
| | | | | | | | | | +-AN_ASSOCIATION:  'e' (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           'e' (A_CHARACTER_LITERAL)
| | | | | | +-AN_EXPRESSION:           or (AN_OPERATOR_SYMBOL)
| | | | | | +-AN_ASSOCIATION:          C = 'f' (A_PARAMETER_ASSOCIATION)
| | | | | | | +-AN_EXPRESSION:         C = 'f' (A_FUNCTION_CALL)
| | | | | | | | +-AN_ASSOCIATION:      C (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     C (AN_IDENTIFIER)
| | | | | | | | +-AN_EXPRESSION:       = (AN_OPERATOR_SYMBOL)
| | | | | | | | +-AN_ASSOCIATION:      'f' (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     'f' (A_CHARACTER_LITERAL)
| | | | +-A_STATEMENT:       null; (A_NULL_STATEMENT)
| | | +-A_PATH:              elsif (Signal = Prep_1 or Signal = Prep_2 or Signal = Prep_3) and (AN_ELSIF_PATH)
| | | |                              (In_Signal_Error(Fm_Prep_Supply) = Short_Circuit or
| | | |                               In_Signal_Error(Fm_Prep_Supply) = Open_Circuit) then
| | | |                               null;
| | | | +-AN_EXPRESSION:     (Signal = Prep_1 or Signal = Prep_2 or Signal = Prep_3) and (A_FUNCTION_CALL)
| | | | |                            (In_Signal_Error(Fm_Prep_Supply) = Short_Circuit or
| | | | |                             In_Signal_Error(Fm_Prep_Supply) = Open_Circuit)
| | | | | +-AN_ASSOCIATION:  (Signal = Prep_1 or Signal = Prep_2 or Signal = Prep_3) (A_PARAMETER_ASSOCIATION)
| | | | | | +-AN_EXPRESSION:           (Signal = Prep_1 or Signal = Prep_2 or Signal = Prep_3) (A_PARENTHESIZED_EXPRESSION)
| | | | | | | +-AN_EXPRESSION:         Signal = Prep_1 or Signal = Prep_2 or Signal = Prep_3 (A_FUNCTION_CALL)
| | | | | | | | +-AN_ASSOCIATION:      Signal = Prep_1 or Signal = Prep_2 (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     Signal = Prep_1 or Signal = Prep_2 (A_FUNCTION_CALL)
| | | | | | | | | | +-AN_ASSOCIATION:  Signal = Prep_1 (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           Signal = Prep_1 (A_FUNCTION_CALL)
| | | | | | | | | | | | +-AN_ASSOCIATION:        Signal (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | | | +-AN_EXPRESSION:       Signal (AN_IDENTIFIER)
| | | | | | | | | | | | +-AN_EXPRESSION:         = (AN_OPERATOR_SYMBOL)
| | | | | | | | | | | | +-AN_ASSOCIATION:        Prep_1 (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | | | +-AN_EXPRESSION:       Prep_1 (AN_ENUMERATION_LITERAL)
| | | | | | | | | | +-AN_EXPRESSION:   or (AN_OPERATOR_SYMBOL)
| | | | | | | | | | +-AN_ASSOCIATION:  Signal = Prep_2 (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           Signal = Prep_2 (A_FUNCTION_CALL)
| | | | | | | | | | | | +-AN_ASSOCIATION:        Signal (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | | | +-AN_EXPRESSION:       Signal (AN_IDENTIFIER)
| | | | | | | | | | | | +-AN_EXPRESSION:         = (AN_OPERATOR_SYMBOL)
| | | | | | | | | | | | +-AN_ASSOCIATION:        Prep_2 (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | | | +-AN_EXPRESSION:       Prep_2 (AN_ENUMERATION_LITERAL)
| | | | | | | | +-AN_EXPRESSION:       or (AN_OPERATOR_SYMBOL)
| | | | | | | | +-AN_ASSOCIATION:      Signal = Prep_3 (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     Signal = Prep_3 (A_FUNCTION_CALL)
| | | | | | | | | | +-AN_ASSOCIATION:  Signal (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           Signal (AN_IDENTIFIER)
| | | | | | | | | | +-AN_EXPRESSION:   = (AN_OPERATOR_SYMBOL)
| | | | | | | | | | +-AN_ASSOCIATION:  Prep_3 (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           Prep_3 (AN_ENUMERATION_LITERAL)
| | | | | +-AN_EXPRESSION:   and (AN_OPERATOR_SYMBOL)
| | | | | +-AN_ASSOCIATION:  (In_Signal_Error(Fm_Prep_Supply) = Short_Circuit or (A_PARAMETER_ASSOCIATION)
| | | | | |                           In_Signal_Error(Fm_Prep_Supply) = Open_Circuit)
| | | | | | +-AN_EXPRESSION:           (In_Signal_Error(Fm_Prep_Supply) = Short_Circuit or (A_PARENTHESIZED_EXPRESSION)
| | | | | | |                         In_Signal_Error(Fm_Prep_Supply) = Open_Circuit)
| | | | | | | +-AN_EXPRESSION:         In_Signal_Error(Fm_Prep_Supply) = Short_Circuit or (A_FUNCTION_CALL)
| | | | | | | |                       In_Signal_Error(Fm_Prep_Supply) = Open_Circuit
| | | | | | | | +-AN_ASSOCIATION:      In_Signal_Error(Fm_Prep_Supply) = Short_Circuit (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     In_Signal_Error(Fm_Prep_Supply) = Short_Circuit (A_FUNCTION_CALL)
| | | | | | | | | | +-AN_ASSOCIATION:  In_Signal_Error(Fm_Prep_Supply) (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           In_Signal_Error(Fm_Prep_Supply) (AN_INDEXED_COMPONENT)
| | | | | | | | | | | | +-AN_EXPRESSION:         In_Signal_Error (AN_IDENTIFIER)
| | | | | | | | | | | | +-AN_EXPRESSION:         Fm_Prep_Supply (AN_ENUMERATION_LITERAL)
| | | | | | | | | | +-AN_EXPRESSION:   = (AN_OPERATOR_SYMBOL)
| | | | | | | | | | +-AN_ASSOCIATION:  Short_Circuit (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           Short_Circuit (AN_ENUMERATION_LITERAL)
| | | | | | | | +-AN_EXPRESSION:       or (AN_OPERATOR_SYMBOL)
| | | | | | | | +-AN_ASSOCIATION:      In_Signal_Error(Fm_Prep_Supply) = Open_Circuit (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     In_Signal_Error(Fm_Prep_Supply) = Open_Circuit (A_FUNCTION_CALL)
| | | | | | | | | | +-AN_ASSOCIATION:  In_Signal_Error(Fm_Prep_Supply) (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           In_Signal_Error(Fm_Prep_Supply) (AN_INDEXED_COMPONENT)
| | | | | | | | | | | | +-AN_EXPRESSION:         In_Signal_Error (AN_IDENTIFIER)
| | | | | | | | | | | | +-AN_EXPRESSION:         Fm_Prep_Supply (AN_ENUMERATION_LITERAL)
| | | | | | | | | | +-AN_EXPRESSION:   = (AN_OPERATOR_SYMBOL)
| | | | | | | | | | +-AN_ASSOCIATION:  Open_Circuit (A_PARAMETER_ASSOCIATION)
| | | | | | | | | | | +-AN_EXPRESSION:           Open_Circuit (AN_ENUMERATION_LITERAL)
| | | | +-A_STATEMENT:       null; (A_NULL_STATEMENT)
| | | +-A_PATH:              elsif (Tristate_Error(Signal_Name)(Short_Circuit) or (AN_ELSIF_PATH)
| | | |                                   Tristate_Error(Signal_Name)(Open_Circuit) or
| | | |                                   Signal_Name = Not_Used) then
| | | |                               null;
| | | | +-AN_EXPRESSION:     (Tristate_Error(Signal_Name)(Short_Circuit) or (A_PARENTHESIZED_EXPRESSION)
| | | | |                                 Tristate_Error(Signal_Name)(Open_Circuit) or
| | | | |                                 Signal_Name = Not_Used)
| | | | | +-AN_EXPRESSION:   Tristate_Error(Signal_Name)(Short_Circuit) or (A_FUNCTION_CALL)
| | | | | |                               Tristate_Error(Signal_Name)(Open_Circuit) or
| | | | | |                               Signal_Name = Not_Used
| | | | | | +-AN_ASSOCIATION:          Tristate_Error(Signal_Name)(Short_Circuit) or (A_PARAMETER_ASSOCIATION)
| | | | | | |                             Tristate_Error(Signal_Name)(Open_Circuit)
| | | | | | | +-AN_EXPRESSION:         Tristate_Error(Signal_Name)(Short_Circuit) or (A_FUNCTION_CALL)
| | | | | | | |                           Tristate_Error(Signal_Name)(Open_Circuit)
| | | | | | | | +-AN_ASSOCIATION:      Tristate_Error(Signal_Name)(Short_Circuit) (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     Tristate_Error(Signal_Name)(Short_Circuit) (AN_INDEXED_COMPONENT)
| | | | | | | | | | +-AN_EXPRESSION:   Tristate_Error(Signal_Name) (AN_INDEXED_COMPONENT)
| | | | | | | | | | | +-AN_EXPRESSION:           Tristate_Error (AN_IDENTIFIER)
| | | | | | | | | | | +-AN_EXPRESSION:           Signal_Name (AN_IDENTIFIER)
| | | | | | | | | | +-AN_EXPRESSION:   Short_Circuit (AN_ENUMERATION_LITERAL)
| | | | | | | | +-AN_EXPRESSION:       or (AN_OPERATOR_SYMBOL)
| | | | | | | | +-AN_ASSOCIATION:      Tristate_Error(Signal_Name)(Open_Circuit) (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     Tristate_Error(Signal_Name)(Open_Circuit) (AN_INDEXED_COMPONENT)
| | | | | | | | | | +-AN_EXPRESSION:   Tristate_Error(Signal_Name) (AN_INDEXED_COMPONENT)
| | | | | | | | | | | +-AN_EXPRESSION:           Tristate_Error (AN_IDENTIFIER)
| | | | | | | | | | | +-AN_EXPRESSION:           Signal_Name (AN_IDENTIFIER)
| | | | | | | | | | +-AN_EXPRESSION:   Open_Circuit (AN_ENUMERATION_LITERAL)
| | | | | | +-AN_EXPRESSION:           or (AN_OPERATOR_SYMBOL)
| | | | | | +-AN_ASSOCIATION:          Signal_Name = Not_Used (A_PARAMETER_ASSOCIATION)
| | | | | | | +-AN_EXPRESSION:         Signal_Name = Not_Used (A_FUNCTION_CALL)
| | | | | | | | +-AN_ASSOCIATION:      Signal_Name (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     Signal_Name (AN_IDENTIFIER)
| | | | | | | | +-AN_EXPRESSION:       = (AN_OPERATOR_SYMBOL)
| | | | | | | | +-AN_ASSOCIATION:      Not_Used (A_PARAMETER_ASSOCIATION)
| | | | | | | | | +-AN_EXPRESSION:     Not_Used (AN_ENUMERATION_LITERAL)
| | | | +-A_STATEMENT:       null; (A_NULL_STATEMENT)
| | | +-A_PATH:              elsif In_Signal_Error(I)=Short_Circuit then (AN_ELSIF_PATH)
| | | |                               null;
| | | | +-AN_EXPRESSION:     In_Signal_Error(I)=Short_Circuit (A_FUNCTION_CALL)
| | | | | +-AN_ASSOCIATION:  In_Signal_Error(I) (A_PARAMETER_ASSOCIATION)
| | | | | | +-AN_EXPRESSION:           In_Signal_Error(I) (AN_INDEXED_COMPONENT)
| | | | | | | +-AN_EXPRESSION:         In_Signal_Error (AN_IDENTIFIER)
| | | | | | | +-AN_EXPRESSION:         I (AN_IDENTIFIER)
| | | | | +-AN_EXPRESSION:   = (AN_OPERATOR_SYMBOL)
| | | | | +-AN_ASSOCIATION:  Short_Circuit (A_PARAMETER_ASSOCIATION)
| | | | | | +-AN_EXPRESSION:           Short_Circuit (AN_ENUMERATION_LITERAL)
| | | | +-A_STATEMENT:       null; (A_NULL_STATEMENT)
| +-A_STATEMENT:             for R in Signal_Name_Type'Range loop (A_FOR_LOOP_STATEMENT)
| |                                null;
| |                             end loop;
| | +-A_DECLARATION:         R in Signal_Name_Type'Range (A_LOOP_PARAMETER_SPECIFICATION)
| | | +-A_DEFINING_NAME:     R (A_DEFINING_IDENTIFIER)
| | | +-A_DEFINITION:        Signal_Name_Type'Range (A_DISCRETE_SUBTYPE_DEFINITION)
| | | | +-AN_EXPRESSION:     Signal_Name_Type'Range (AN_ATTRIBUTE_REFERENCE)
| | | | | +-AN_EXPRESSION:   Signal_Name_Type (AN_IDENTIFIER)
| | | | | +-AN_EXPRESSION:   Range (AN_IDENTIFIER)
| | +-A_STATEMENT:           null; (A_NULL_STATEMENT)
